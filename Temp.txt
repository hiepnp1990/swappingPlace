Date startDate = ...;                // time from which certificate is valid
Date expiryDate = ...;               // time after which certificate is not valid
BigInteger serialNumber = ...;       // serial number for certificate
PrivateKey caKey = ...;              // private key of the certifying authority (ca) certificate
X509Certificate caCert = ...;        // public key certificate of the certifying authority
KeyPair keyPair = ...;               // public/private key pair that we are creating certificate for
X509V3CertificateGenerator certGen = new X509V3CertificateGenerator();
X500Principal              subjectName = new X500Principal("CN=Test V3 Certificate");
 
certGen.setSerialNumber(serialNumber);
certGen.setIssuerDN(caCert.getSubjectX500Principal());
certGen.setNotBefore(startDate);
certGen.setNotAfter(expiryDate);
certGen.setSubjectDN(subjectName);
certGen.setPublicKey(keyPair.getPublic());
certGen.setSignatureAlgorithm(signatureAlgorithm);
 
certGen.addExtension(X509Extensions.AuthorityKeyIdentifier, false,
                        new AuthorityKeyIdentifierStructure(caCert));
certGen.addExtension(X509Extensions.SubjectKeyIdentifier, false,
                        new SubjectKeyIdentifierStructure(keyPair.getPublic());
 
X509Certificate cert = certGen.generate(caKey, "BC");   // note: private key of CA



http://www.air-watch.com/pricing/
http://community.spiceworks.com/topic/171483-mobile-device-management-product-comparisons

http://stackoverflow.com/questions/11149118/a-dns-server-for-my-vpn-to-solve-network-names-only

CVE-2015-1538, CVE-2015-1539, CVE-2015-3824, CVE-2015-3826, CVE-2015-3827, CVE-2015-3828, CVE-2015-3829
http://blog.zimperium.com/experts-found-a-unicorn-in-the-heart-of-android/
https://quandarypeak.com/2013/08/androids-stagefright-media-player-architecture/
https://github.com/CyanogenMod/android_frameworks_av/commits/cm-12.1?author=jduck


import json

class JSONEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, ObjectId):
            return str(o)
        return json.JSONEncoder.default(self, o)

JSONEncoder().encode(analytics)



from app import app  
from flask import request, redirect, render_template, url_for, flash  
from flask.ext.login import login_user, logout_user  
from .forms import LoginForm  
from .user import User

@app.route('/login', methods=['GET', 'POST'])
def login():  
    form = LoginForm()
    if request.method == 'POST' and form.validate_on_submit():
        user = app.config['USERS_COLLECTION'].find_one({"_id": form.username.data})
        if user and User.validate_login(user['password'], form.password.data):
            user_obj = User(user['_id'])
            login_user(user_obj)
            flash("Logged in successfully", category='success')
            return redirect(request.args.get("next") or url_for("writePost"))
        flash("Wrong username or password", category='error')
    return render_template('login.html', title='login', form=form)
    
    
    
    $scope.$watch('name', function() {
        $scope.name = $scope.name.toLowerCase().replace(/\s+/g,'');
  });
  
  
  
app.directive('customValidation', function(){
   return {
     require: 'ngModel',
     link: function(scope, element, attrs, modelCtrl) {

       modelCtrl.$parsers.push(function (inputValue) {

         var transformedInput = inputValue.toLowerCase().replace(/ /g, ''); 

         if (transformedInput!=inputValue) {
           modelCtrl.$setViewValue(transformedInput);
           modelCtrl.$render();
         }         

         return transformedInput;         
       });
     }
   };
});
